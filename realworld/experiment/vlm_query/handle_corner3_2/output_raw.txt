### <stage constraints splitter> ###
### stage 1 sub-goal constraints (Grasp the red handle)
```python
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the red handle"> """
    return grasp("the area of the handle of the red handle")
```

### <stage constraints splitter> ###
### stage 2 target constraints (Move the red handle down by 20 cm)
```python
def stage_2_target_constraint1():
    """constraints: <"targets constraints", "the center of the handle of the red handle", "the center of the handle of the red handle at its initial timestamp", "the center of the handle of the red handle shifts down by 20 centimeters">"""
    mask1 = segment("the center of the handle of the red handle", -1)
    mask1_initial = segment("the center of the handle of the red handle", -2)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc1_initial = mask1_initial
    else:
        pc1 = mask_to_pc(mask1)
        pc1_initial = mask_to_pc(mask1_initial)
    
    # Calculate the vertical shift (z-axis)
    current_position = np.mean(pc1, axis=0)
    initial_position = np.mean(pc1_initial, axis=0)
    
    # The target position is 20 cm below the initial position
    target_position = initial_position.copy()
    target_position[2] -= 0.20  # Move down by 20 cm
    
    # Calculate the cost as the L2 distance between the current position and the target position
    cost = np.linalg.norm(current_position - target_position)
    
    return cost
```

### stage 2 path constraints (Move the red handle down by 20 cm)
```python
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the axis of the handle of the red handle", "the plane of the surface of the table", "the axis of the handle of the red handle remains perpendicular to the plane of the surface of the table">"""
    mask1 = segment("the axis of the handle of the red handle", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
    
    # Calculate the axis of the handle of the red handle (pc1)
    covariance_matrix_handle = np.cov(pc1.T)
    eigenvalues_handle, eigenvectors_handle = np.linalg.eig(covariance_matrix_handle)
    handle_axis = eigenvectors_handle[:, np.argmax(eigenvalues_handle)]
    
    # Calculate the normal vector of the plane of the surface of the table (pc2)
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]
    
    # Normalize both vectors
    handle_axis = handle_axis / np.linalg.norm(handle_axis)
    table_normal = table_normal / np.linalg.norm(table_normal)
    
    # Compute the dot product between the handle axis and the table normal
    dot_product = np.dot(handle_axis, table_normal)
    
    # The cost is based on how close the dot product is to 0 (perpendicular)
    cost = abs(dot_product) * 5.0
    
    return cost
```

### <stage constraints splitter> ###
### stage 3 sub-goal constraints (Release the red handle)
```python
def stage_3_subgoal_constraint1():
    """constraints: <"release"> """
    release()
    return
```

---

### Enumerate all the "`geometry` of `the object part` of `the object`" in all the constraints and all the grasp stages:
```python
object_to_segment = [
    "the area of the handle of the red handle",
    "the center of the handle of the red handle",
    "the axis of the handle of the red handle",
    "the plane of the surface of the table"
]
```