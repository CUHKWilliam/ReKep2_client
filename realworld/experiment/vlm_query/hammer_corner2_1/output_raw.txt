### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping the hammer)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the hammer"> """
    return grasp("the area of the handle of the hammer")

### <stage constraints splitter> ###
### stage 2 sub-goal constraints (align the hammer with the black nail)
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the head of the hammer", "the axis of the body of the black nail", "the center of the head of the hammer is colinear with the axis of the body of the black nail by 20 centimeters">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the center of the head of the hammer
    hammer_head_center = np.mean(pc1, axis=0)
    
    # Compute the axis of the black nail
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    nail_axis = nail_axis / np.linalg.norm(nail_axis)

    # Calculate the target point 20 cm along the axis of the black nail
    nail_center = np.mean(pc2, axis=0)
    target_point = nail_center - nail_axis * 0.2

    # Compute the cost as the distance between the hammer head center and the target point
    cost = np.linalg.norm(hammer_head_center - target_point)
    
    return cost

def stage_2_subgoal_constraint2():
    """constraints: <"path constraints", "the axis of the handle of the hammer", "the axis of the body of the black nail", "the axis of the handle of the hammer is parallel to the axis of the body of the black nail">"""
    mask1 = segment("the axis of the handle of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the axis of the hammer handle
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)

    # Compute the axis of the black nail
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    nail_axis = nail_axis / np.linalg.norm(nail_axis)

    # Compute the dot product between the hammer axis and the nail axis
    dot_product = np.dot(hammer_axis, nail_axis)
    
    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(1 - dot_product) * 5
    
    return cost

### <stage constraints splitter> ###
### stage 3 target constraints (smash the black nail)
def stage_3_target_constraint1():
    """constraints: <"target constraints", "the center of the head of the hammer", "the center of the body of the black nail", "the center of the head of the hammer moves toward the center of the body of the black nail by 5 centimeters">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask1_initial = segment("the center of the head of the hammer", -2)
    mask2 = segment("the center of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1_initial = mask1_initial
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_initial = mask_to_pc(mask1_initial)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the direction vector from the initial hammer head position to the nail center
    hammer_initial_center = np.mean(pc1_initial, axis=0)
    nail_center = np.mean(pc2, axis=0)
    direction_vec = nail_center - hammer_initial_center
    direction_vec = direction_vec / np.linalg.norm(direction_vec)

    # Target point is 5 cm along the direction vector
    target_point = nail_center + direction_vec * 0.05

    # Compute the current hammer head center
    hammer_head_center = np.mean(pc1, axis=0)

    # Compute the cost as the distance between the current hammer head center and the target point
    cost = np.linalg.norm(hammer_head_center - target_point)
    
    return cost

### <stage constraints splitter> ###
### stage 4 release constraints
def stage_4_release_constraint1():
    """constraints: <"release"> """
    release()
    return

### Enumerate all the "`geometry` of `the object part` of `the object`" in all the constraints and all the grasp stages:
object_to_segment = [
    "the area of the handle of the hammer",
    "the center of the head of the hammer",
    "the axis of the handle of the hammer",
    "the axis of the body of the black nail",
    "the center of the body of the black nail"
]