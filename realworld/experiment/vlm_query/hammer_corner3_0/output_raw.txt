```python
import numpy as np

### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping the hammer)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the hammer"> """
    return grasp("the area of the handle of the hammer")


### <stage constraints splitter> ###
### stage 2 sub-goal constraints (align hammer with the axis of the black nail by 20 cm)
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the head of the hammer", "the axis of the body of the black nail", "the center of the head of the hammer is colinear with the axis of the body of the black nail by 20 centimeters">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the center of the hammer head and the axis of the black nail
    hammer_head_center = np.mean(pc1, axis=0)
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    
    # Normalize the nail axis
    nail_axis = nail_axis / np.linalg.norm(nail_axis)
    
    # Calculate the target point 20 cm along the nail axis
    nail_center = np.mean(pc2, axis=0)
    target_point = nail_center - nail_axis * 0.2
    
    # Compute the cost as the distance between the hammer head center and the target point
    cost = np.linalg.norm(hammer_head_center - target_point)
    
    return cost

def stage_2_subgoal_constraint2():
    """constraints: <"path constraints", "the axis of the handle of the hammer", "the axis of the body of the black nail", "the axis of the handle of the hammer is parallel to the axis of the body of the black nail">"""
    mask1 = segment("the axis of the handle of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the axis of the hammer handle and the axis of the black nail
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]
    
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    
    # Normalize both axes
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)
    nail_axis = nail_axis / np.linalg.norm(nail_axis)
    
    # Compute the dot product between the hammer axis and the nail axis
    dot_product = np.dot(hammer_axis, nail_axis)
    
    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(1 - dot_product) * 5
    
    return cost


### <stage constraints splitter> ###
### stage 3 target constraints (smash the black nail)
def stage_3_target_constraint1():
    """constraints: <"target constraints", "the center of the head of the hammer", "the center of the head of the black nail", "the center of the head of the hammer reaches the center of the head of the black nail">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask2 = segment("the center of the head of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the center of the hammer head and the center of the black nail head
    hammer_head_center = np.mean(pc1, axis=0)
    nail_head_center = np.mean(pc2, axis=0)
    
    # Compute the cost as the distance between the hammer head center and the nail head center
    cost = np.linalg.norm(hammer_head_center - nail_head_center)
    
    return cost

def stage_3_path_constraint1():
    """constraints: <"path constraints", "the axis of the handle of the hammer", "the axis of the body of the black nail", "the axis of the handle of the hammer remains parallel to the axis of the body of the black nail">"""
    mask1 = segment("the axis of the handle of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the axis of the hammer handle and the axis of the black nail
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]
    
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    
    # Normalize both axes
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)
    nail_axis = nail_axis / np.linalg.norm(nail_axis)
    
    # Compute the dot product between the hammer axis and the nail axis
    dot_product = np.dot(hammer_axis, nail_axis)
    
    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(1 - dot_product) * 5
    
    return cost


### <stage constraints splitter> ###
### stage 4 sub-goal constraints (release the hammer)
def stage_4_subgoal_constraint1():
    """constraints: <"release"> """
    release()
    return


### List of geometries to track:
object_to_segment = [
    "the area of the handle of the hammer",
    "the center of the head of the hammer",
    "the axis of the handle of the hammer",
    "the axis of the body of the black nail",
    "the center of the head of the black nail"
]
```