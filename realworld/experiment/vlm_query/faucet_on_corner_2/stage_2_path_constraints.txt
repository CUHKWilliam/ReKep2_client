def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the handle of the red faucet", "the axis of the body of the red faucet", "the center of the handle of the red faucet moves along the axis of the body of the red faucet">"""
    # Segment the center of the handle and the axis of the body of the red faucet
    mask1 = segment("the center of the handle of the red faucet", -1)  # Current position
    mask2 = segment("the axis of the body of the red faucet", -1)  # Axis of the faucet

    # Convert masks to point clouds if necessary
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Normalize the axis of the body of the red faucet (from pc2)
    covariance_matrix_faucet = np.cov(pc2.T)
    eigenvalues_faucet, eigenvectors_faucet = np.linalg.eig(covariance_matrix_faucet)
    faucet_axis = eigenvectors_faucet[:, np.argmax(eigenvalues_faucet)]
    faucet_axis = faucet_axis / np.linalg.norm(faucet_axis)  # Normalize the axis vector

    # Step 2: Compute the projection of the handle's center onto the faucet axis
    handle_center = np.mean(pc1, axis=0)
    faucet_center = np.mean(pc2, axis=0)
    projection = np.dot(handle_center - faucet_center, faucet_axis) * faucet_axis + faucet_center

    # Step 3: Compute the cost as the distance between the handle's center and its projection onto the faucet axis
    cost = np.linalg.norm(handle_center - projection)
    
    return cost

def stage_2_path_constraint2():
    """constraints: <"path constraints", "the center of the handle of the red faucet", "the plane of the surface of the table", "the center of the handle of the red faucet remains above the plane of the surface of the table">"""
    # Segment the center of the handle and the plane of the surface of the table
    mask1 = segment("the center of the handle of the red faucet", -1)  # Current position
    mask2 = segment("the plane of the surface of the table", -1)  # Plane of the table

    # Convert masks to point clouds if necessary
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Compute the normal vector of the plane of the surface of the table (from pc2)
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]
    table_normal = table_normal / np.linalg.norm(table_normal)  # Normalize the normal vector

    # Step 2: Compute the distance between the handle's center and the table's surface
    handle_center = np.mean(pc1, axis=0)
    table_center = np.mean(pc2, axis=0)
    distance_to_table = np.dot(handle_center - table_center, table_normal)

    # Step 3: The cost is the negative distance if the handle is below the table, otherwise 0
    cost = max(0, -distance_to_table)
    
    return cost

