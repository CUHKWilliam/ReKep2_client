def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the handle of the red faucet", "the axis of the body of the red faucet", "the center of the handle of the red faucet rotates around the axis of the body of the red faucet">"""
    mask1_current = segment("the center of the handle of the red faucet", -1)  # Current position of the handle
    mask1 = segment("the center of the handle of the red faucet", -2)  # Position at the time of grasping
    mask2 = segment("the axis of the body of the red faucet", -2)  # Axis of the faucet

    if mask1.shape[-1] == 3:
        pc1_current = mask1_current
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_current = mask_to_pc(mask1_current)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Normalize the axis of the body of the red faucet (from pc2)
    covariance_matrix_faucet = np.cov(pc2.T)
    eigenvalues_faucet, eigenvectors_faucet = np.linalg.eig(covariance_matrix_faucet)
    faucet_axis = eigenvectors_faucet[:, np.argmax(eigenvalues_faucet)]
    faucet_axis = faucet_axis / np.linalg.norm(faucet_axis)  # Normalize the axis vector

    # Step 2: Compute the dot product between the current handle position and the faucet axis
    handle_vector = pc1_current.mean(0) - pc1.mean(0)  # Vector of handle movement
    handle_vector = handle_vector / np.linalg.norm(handle_vector)  # Normalize the handle vector

    # The cost is based on how perpendicular the handle movement is to the faucet axis
    dot_product = np.dot(handle_vector, faucet_axis)
    cost = abs(dot_product) * 5.  # Multiply by 5 for angle-related constraints

    return cost

