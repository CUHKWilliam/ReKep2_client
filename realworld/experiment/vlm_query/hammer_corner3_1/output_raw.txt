```python
### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping the hammer)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the hammer"> """
    return grasp("the area of the handle of the hammer")


### <stage constraints splitter> ###
### stage 2 sub-goal constraints (align the hammer with the black nail)
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the axis of the handle of the hammer", "the axis of the body of the black nail", "the axis of the handle of the hammer is colinear with the axis of the body of the black nail">"""
    mask1 = segment("the axis of the handle of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the axis of the handle of the hammer (pc1)
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]

    # Calculate the axis of the body of the black nail (pc2)
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]

    # Normalize both vectors
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)
    nail_axis = nail_axis / np.linalg.norm(nail_axis)

    # Compute the dot product between the hammer axis and nail axis
    dot_product = np.dot(hammer_axis, nail_axis)

    # The cost is based on how close the dot product is to 1 (colinear)
    cost = abs(1 - dot_product) * 5.
    
    return cost


### stage 2 path constraints (align the hammer above the black nail by 20 cm)
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the head of the hammer", "the center of the body of the black nail", "the center of the head of the hammer is directly above the center of the body of the black nail by around 20 centimeters">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask2 = segment("the center of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the head of the hammer and the body of the black nail
    hammer_head_center = np.mean(pc1, axis=0)
    nail_body_center = np.mean(pc2, axis=0)

    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(hammer_head_center[:2] - nail_body_center[:2])

    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = hammer_head_center[2] - nail_body_center[2] - 0.2  # 20 cm above

    cost = abs(vertical_distance) + horizontal_distance
    
    return cost


### <stage constraints splitter> ###
### stage 3 sub-goal constraints (move the hammer 20 cm along the axis of the black nail)
def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the head of the hammer", "the center of the body of the black nail", "the center of the head of the hammer moves toward the center of the body of the black nail by 20 centimeters along the axis of the body of the black nail">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask1_initial = segment("the center of the head of the hammer", -2)
    mask2 = segment("the center of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1_initial = mask1_initial
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_initial = mask_to_pc(mask1_initial)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the direction vector from the initial hammer head position to the nail
    direction_vec = np.mean(pc2, axis=0) - np.mean(pc1_initial, axis=0)
    direction_vec = direction_vec / np.linalg.norm(direction_vec)

    # Target position is 20 cm along the direction vector
    target = np.mean(pc2, axis=0) - direction_vec * 0.2

    # Compute the current position of the hammer head
    hammer_head_center = np.mean(pc1, axis=0)

    # The cost is the distance between the current hammer head position and the target
    cost = np.linalg.norm(hammer_head_center - target)
    
    return cost


### stage 3 path constraints (keep the hammer aligned with the black nail during movement)
def stage_3_path_constraint1():
    """constraints: <"path constraints", "the axis of the handle of the hammer", "the axis of the body of the black nail", "the axis of the handle of the hammer remains colinear with the axis of the body of the black nail">"""
    mask1 = segment("the axis of the handle of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the axis of the handle of the hammer (pc1)
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]

    # Calculate the axis of the body of the black nail (pc2)
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]

    # Normalize both vectors
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)
    nail_axis = nail_axis / np.linalg.norm(nail_axis)

    # Compute the dot product between the hammer axis and nail axis
    dot_product = np.dot(hammer_axis, nail_axis)

    # The cost is based on how close the dot product is to 1 (colinear)
    cost = abs(1 - dot_product) * 5.
    
    return cost


### <stage constraints splitter> ###
### stage 4 target constraints (smash the black nail)
def stage_4_targets_constraint1():
    """constraints: <"target constraints", "the center of the head of the hammer", "the center of the body of the black nail", "the center of the head of the hammer reaches the center of the body of the black nail">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask2 = segment("the center of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the hammer head and the body of the black nail
    hammer_head_center = np.mean(pc1, axis=0)
    nail_body_center = np.mean(pc2, axis=0)

    # The cost is the distance between the hammer head and the nail body
    cost = np.linalg.norm(hammer_head_center - nail_body_center)
    
    return cost


### stage 4 sub-goal constraints (release the hammer)
def stage_4_subgoal_constraint1():
    """constraints: <"release"> """
    release()
    return


### Enumerate all the `geometry` of `the object part` of `the object` in all the constraints and all the grasp stages:
object_to_segment = [
    "the area of the handle of the hammer",
    "the axis of the handle of the hammer",
    "the center of the head of the hammer",
    "the axis of the body of the black nail",
    "the center of the body of the black nail"
]
```