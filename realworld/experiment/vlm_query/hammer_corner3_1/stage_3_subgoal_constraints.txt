def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the head of the hammer", "the center of the body of the black nail", "the center of the head of the hammer moves toward the center of the body of the black nail by 20 centimeters along the axis of the body of the black nail">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask1_initial = segment("the center of the head of the hammer", -2)
    mask2 = segment("the center of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1_initial = mask1_initial
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_initial = mask_to_pc(mask1_initial)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the direction vector from the initial hammer head position to the nail
    direction_vec = np.mean(pc2, axis=0) - np.mean(pc1_initial, axis=0)
    direction_vec = direction_vec / np.linalg.norm(direction_vec)

    # Target position is 20 cm along the direction vector
    target = np.mean(pc2, axis=0) - direction_vec * 0.2

    # Compute the current position of the hammer head
    hammer_head_center = np.mean(pc1, axis=0)

    # The cost is the distance between the current hammer head position and the target
    cost = np.linalg.norm(hammer_head_center - target)
    
    return cost

