def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the head of the hammer", "the axis of the body of the black nail", "the center of the head of the hammer is colinear with the axis of the body of the black nail by 10 cm">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask1_latest = segment("the center of the head of the hammer", -2)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
    pc1_latest = mask1_latest
    # Compute the center of the head of the hammer
    hammer_head_center = np.mean(pc1, axis=0)
    hammer_head_center_latest = np.mean(pc1_latest, axis=0)
    
    # Compute the axis of the black nail
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    nail_axis = nail_axis / np.linalg.norm(nail_axis)

    # Calculate the target point 10 cm along the axis of the black nail
    nail_center = np.mean(pc2, axis=0)
    target_point_1 = nail_center + nail_axis * 0.2
    target_point_2 = nail_center - nail_axis * 0.2
    if np.linalg.norm(target_point_1 - hammer_head_center_latest) < np.linalg.norm(target_point_2 - hammer_head_center_latest):
        target_point = target_point_1
    else:
        target_point = target_point_2
    # Compute the cost as the distance between the hammer head center and the target point
    cost = np.linalg.norm(hammer_head_center - target_point)
    return cost

def stage_2_subgoal_constraint2():
    """constraints: <"sub-goal constraints", "the axis of the body of the hammer", "the axis of the body of the black nail", "the axis of the body of the hammer is parallel to the axis of the body of the black nail">"""
    mask1 = segment("the axis of the body of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the axis of the hammer
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)

    # Compute the axis of the black nail
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    nail_axis = nail_axis / np.linalg.norm(nail_axis)

    # Compute the dot product between the hammer axis and the nail axis
    dot_product = np.dot(hammer_axis, nail_axis)

    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(1 - dot_product) * 5.
    
    return cost

