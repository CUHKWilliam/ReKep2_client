def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the gripper of the robot", "the center of the handle of the safe", "the distance between the center of the gripper of the robot and the center of the handle of the safe remains constant">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the handle of the safe", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the center of the gripper and the center of the handle
    gripper_center = np.mean(pc1, axis=0)
    handle_center = np.mean(pc2, axis=0)

    # Compute the distance between the gripper and the handle
    distance = np.linalg.norm(gripper_center - handle_center)

    # The cost is based on how much the distance deviates from the initial distance
    initial_distance = np.linalg.norm(gripper_center - handle_center)  # Assuming initial distance is recorded
    cost = abs(distance - initial_distance)
    
    return cost

