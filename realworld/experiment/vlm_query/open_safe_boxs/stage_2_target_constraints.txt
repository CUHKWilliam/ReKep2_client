def stage_2_target_constraint1():
    """constraints: <"targets constraints", "the plane of the surface of the door of the safe", "the axis of the hinge of the door of the safe", "the plane of the surface of the door of the safe rotates around the axis of the hinge of the door of the safe by 90 degrees">"""
    mask1 = segment("the plane of the surface of the door of the safe", -1)
    mask1_initial = segment("the plane of the surface of the door of the safe", 0)
    mask2 = segment("the axis of the hinge of the door of the safe", -1)
    
    if mask1.shape[-1] == 3:
        pc1_initial = mask1_initial
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_initial = mask_to_pc(mask1_initial)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: center pc1_initial at the center of pc2
    pc2_mean = pc2.mean(0)
    pc2 -= pc2_mean
    pc1_initial -= pc2_mean

    # Step 2: Normalize the axis of the hinge of the door (from pc2)
    covariance_matrix_door = np.cov(pc2.T)
    eigenvalues_door, eigenvectors_door = np.linalg.eig(covariance_matrix_door)
    door_axis = eigenvectors_door[:, np.argmax(eigenvalues_door)]
    door_axis = door_axis / np.linalg.norm(door_axis)  # Normalize the axis vector

    # Step 3: Convert the angle from degrees to radians
    angle_radians = np.radians(90)  # 90 degrees

    # Step 4: Compute the rotation matrix using Rodrigues' rotation formula
    K = np.array([[0, -door_axis[2], door_axis[1]],
                  [door_axis[2], 0, -door_axis[0]],
                  [-door_axis[1], door_axis[0], 0]])  # Skew-symmetric matrix for door_axis
    I = np.eye(3)  # Identity matrix
    rotation_matrix = I + np.sin(angle_radians) * K + (1 - np.cos(angle_radians)) * np.dot(K, K)

    # Step 5: Rotate each point in pc1
    rotated_pc1 = np.dot(pc1_initial, rotation_matrix.T)  # Apply rotation matrix to each point

    # Step 6: Restore the position of rotated_pc1 and pc2
    rotated_pc1 += pc2_mean
    pc2 += pc2_mean

    # Step 7: compute the cost of how pc1 aligns with rotated_pc1.
    distances = np.linalg.norm(pc1 - rotated_pc1, axis=1)
    cost = np.sum(distances)
    
    return cost

