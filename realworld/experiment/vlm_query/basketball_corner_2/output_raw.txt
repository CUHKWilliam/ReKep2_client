```python
import numpy as np

### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the body of the basketball"> """
    return grasp("the area of the body of the basketball")


### <stage constraints splitter> ###
### stage 2 sub-goal constraints
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the body of the basketball", "the center of the body of the basketball at its initial timestamp", "the center of the body of the basketball is directly above the center of the body of the basketball at its initial timestamp by more than 20 centimeters">"""
    mask1 = segment("the center of the body of the basketball", -1)
    mask2 = segment("the center of the body of the basketball", 0)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the basketball at the latest and initial timestamps
    basketball_center_latest = np.mean(pc1, axis=0)
    basketball_center_initial = np.mean(pc2, axis=0)
    
    # Calculate the vertical distance (z-axis) between the centers
    vertical_distance = basketball_center_latest[2] - basketball_center_initial[2]
    
    # The cost is based on how far the basketball is lifted vertically by more than 20 cm
    cost = max(0, 0.2 - vertical_distance)
    
    return cost


### <stage constraints splitter> ###
### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the body of the basketball", "the plane of the surface of the table", "the center of the body of the basketball moves vertically above the plane of the surface of the table">"""
    mask1 = segment("the center of the body of the basketball", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the basketball and the table surface
    basketball_center = np.mean(pc1, axis=0)
    table_surface = np.mean(pc2, axis=0)
    
    # Calculate the vertical distance (z-axis) between the basketball and the table surface
    vertical_distance = basketball_center[2] - table_surface[2]
    
    # The cost is based on how far the basketball is above the table surface
    cost = max(0, 0.01 - vertical_distance)  # Ensure it's above the table
    
    return cost


### <stage constraints splitter> ###
### stage 3 sub-goal constraints
def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the body of the basketball", "the center of the hoop of the basketball hoop", "the center of the body of the basketball is directly above the center of the hoop of the basketball hoop by around 20 centimeters">"""
    mask1 = segment("the center of the body of the basketball", -1)
    mask2 = segment("the center of the hoop of the basketball hoop", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the basketball and the hoop
    basketball_center = np.mean(pc1, axis=0)
    hoop_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(basketball_center[:2] - hoop_center[:2])
    
    # Calculate the vertical distance (z-axis) between the basketball and the hoop
    vertical_distance = basketball_center[2] - hoop_center[2]
    
    # The cost is based on how close the basketball is to being directly above the hoop by around 20 cm
    cost = abs(vertical_distance - 0.2) + horizontal_distance
    
    return cost


### <stage constraints splitter> ###
### stage 3 path constraints
def stage_3_path_constraint1():
    """constraints: <"path constraints", "the center of the body of the basketball", "the plane of the surface of the table", "the center of the body of the basketball moves parallel to the plane of the surface of the table">"""
    mask1 = segment("the center of the body of the basketball", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the covariance matrix of the basketball's movement
    covariance_matrix_basketball = np.cov(pc1.T)
    eigenvalues_basketball, eigenvectors_basketball = np.linalg.eig(covariance_matrix_basketball)
    
    # The eigenvector corresponding to the smallest eigenvalue is the vertical axis of the basketball's movement
    basketball_vertical_axis = eigenvectors_basketball[:, np.argmin(eigenvalues_basketball)]
    
    # Compute the normal vector of the table surface
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_surface_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]
    
    # Normalize both vectors
    basketball_vertical_axis = basketball_vertical_axis / np.linalg.norm(basketball_vertical_axis)
    table_surface_normal = table_surface_normal / np.linalg.norm(table_surface_normal)
    
    # Compute the dot product between the basketball's vertical axis and the table surface normal
    dot_product = np.dot(basketball_vertical_axis, table_surface_normal)
    
    # The cost is based on how parallel the basketball's movement is to the table surface
    cost = abs(dot_product) * 5.
    
    return cost


### <stage constraints splitter> ###
### stage 4 sub-goal constraints
def stage_4_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the body of the basketball", "the center of the hoop of the basketball hoop", "the center of the body of the basketball is directly above the center of the hoop of the basketball hoop by around 5 centimeters">"""
    mask1 = segment("the center of the body of the basketball", -1)
    mask2 = segment("the center of the hoop of the basketball hoop", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the basketball and the hoop
    basketball_center = np.mean(pc1, axis=0)
    hoop_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(basketball_center[:2] - hoop_center[:2])
    
    # Calculate the vertical distance (z-axis) between the basketball and the hoop
    vertical_distance = basketball_center[2] - hoop_center[2]
    
    # The cost is based on how close the basketball is to being directly above the hoop by around 5 cm
    cost = abs(vertical_distance - 0.05) + horizontal_distance
    
    return cost


### <stage constraints splitter> ###
### stage 4 path constraints
def stage_4_path_constraint1():
    """constraints: <"path constraints", "the center of the body of the basketball", "the plane of the surface of the table", "the center of the body of the basketball moves vertically towards the hoop">"""
    mask1 = segment("the center of the body of the basketball", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the covariance matrix of the basketball's movement
    covariance_matrix_basketball = np.cov(pc1.T)
    eigenvalues_basketball, eigenvectors_basketball = np.linalg.eig(covariance_matrix_basketball)
    
    # The eigenvector corresponding to the smallest eigenvalue is the vertical axis of the basketball's movement
    basketball_vertical_axis = eigenvectors_basketball[:, np.argmin(eigenvalues_basketball)]
    
    # Compute the normal vector of the table surface
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_surface_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]
    
    # Normalize both vectors
    basketball_vertical_axis = basketball_vertical_axis / np.linalg.norm(basketball_vertical_axis)
    table_surface_normal = table_surface_normal / np.linalg.norm(table_surface_normal)
    
    # Compute the dot product between the basketball's vertical axis and the table surface normal
    dot_product = np.dot(basketball_vertical_axis, table_surface_normal)
    
    # The cost is based on how perpendicular the basketball's movement is to the table surface
    cost = abs(dot_product) * 5.
    
    return cost


### <stage constraints splitter> ###
### stage 5 sub-goal constraints (releasing)
def stage_5_subgoal_constraint1():
    """constraints: <"release">"""
    release()
    return


### List of geometries to segment
object_to_segment = [
    "the center of the body of the basketball",
    "the center of the hoop of the basketball hoop",
    "the plane of the surface of the table"
]
```