def stage_1_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the body of the red button of the button", "the center of the gripper of the robot is directly above the center of the body of the red button of the button by 10 centimeters">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the body of the red button of the button", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the button
    gripper_center = np.mean(pc1, axis=0)
    button_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(gripper_center[:2] - button_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = gripper_center[2] - button_center[2] - 0.10  # 10 cm above
    
    # The cost is based on the deviation from the ideal position
    cost = abs(vertical_distance) + horizontal_distance
    
    return cost

