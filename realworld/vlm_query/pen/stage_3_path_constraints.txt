def stage_3_path_constraint1():
    import ipdb;ipdb.set_trace()
    mask1 = segment("the center of the tip of the pen")
    mask2 = segment("the center of the opening of the black cup")
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the center of mass (mean position) for the pen tip and the cup opening
    pen_tip_center = np.mean(pc1, axis=0)
    cup_opening_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(pen_tip_center[:2] - cup_opening_center[:2])
    
    # Calculate the vertical distance, where pen tip should be 1cm above the cup opening
    vertical_distance = abs(pen_tip_center[2] - (cup_opening_center[2] + 0.1))

    cost = horizontal_distance + vertical_distance
    
    return cost

def stage_3_path_constraint2():
    """constraints: <"path constraints", "the axis of the body of the pen", "the axis of the opening of the black cup", "parallel"> """
    mask1 = segment("the axis of the body of the pen")
    mask2 = segment("the axis of the opening of the black cup")
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Find pen axis as the eigenvector of the largest eigenvalue
    covariance_matrix_pen = np.cov(pc1.T)
    eigenvalues_pen, eigenvectors_pen = np.linalg.eig(covariance_matrix_pen)
    pen_axis = eigenvectors_pen[:, np.argmax(eigenvalues_pen)]
    
    # Find black cup axis as the eigenvector of the smallest eigenvalue
    covariance_matrix_cup = np.cov(pc2.T)
    eigenvalues_cup, eigenvectors_cup = np.linalg.eig(covariance_matrix_cup)
    cup_axis = eigenvectors_cup[:, np.argmin(eigenvalues_cup)]

    # Normalize both vectors
    pen_axis = pen_axis / np.linalg.norm(pen_axis)
    cup_axis = cup_axis / np.linalg.norm(cup_axis)

    # Dot product of both axes should be 1 if parallel
    dot_product = np.dot(pen_axis, cup_axis)
    cost = abs(dot_product - 1)
    return cost