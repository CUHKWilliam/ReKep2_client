### <stage constraints splitter> ###
### stage 1 sub-goal constraints
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the fridge">"""
    return grasp("the area of the handle of the fridge")


### <stage constraints splitter> ###
### stage 2 target constraints
def stage_2_targets_constraint1():
    """constraints: <"targets constraints", "the plane of the surface of the door of the fridge", "the axis of the hinge of the fridge", "the plane of the surface of the door of the fridge rotates around the axis of the hinge of the fridge by 90 degrees">"""
    mask1 = segment("the plane of the surface of the door of the fridge", -1)
    mask1_initial = segment("the plane of the surface of the door of the fridge", 0)
    mask2 = segment("the axis of the hinge of the fridge", -1)
    
    # Retrieve point clouds
    if mask1.shape[-1] == 3:
        pc1_initial = mask1_initial
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_initial = mask_to_pc(mask1_initial)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
    
    # Step 1: center pc1_initial at the center of pc2
    pc2_mean = pc2.mean(0)
    pc2 -= pc2_mean
    pc1_initial -= pc2_mean

    # Step 2: Normalize the axis of the hinge of the fridge door (from pc2)
    covariance_matrix_door = np.cov(pc2.T)
    eigenvalues_door, eigenvectors_door = np.linalg.eig(covariance_matrix_door)
    fridge_axis = eigenvectors_door[:, np.argmax(eigenvalues_door)]
    fridge_axis = fridge_axis / np.linalg.norm(fridge_axis)  # Normalize the axis vector

    # Step 3: Convert angle to radians (90 degrees in this case)
    angle_radians = np.radians(90)

    # Step 4: Compute the rotation matrix using Rodrigues' rotation formula
    K = np.array([[0, -fridge_axis[2], fridge_axis[1]],
                  [fridge_axis[2], 0, -fridge_axis[0]],
                  [-fridge_axis[1], fridge_axis[0], 0]])  # Skew-symmetric matrix for the axis
    I = np.eye(3)  # Identity matrix
    rotation_matrix = I + np.sin(angle_radians) * K + (1 - np.cos(angle_radians)) * np.dot(K, K)
    
    # Step 5: Apply the rotation
    rotated_pc1 = np.dot(pc1_initial, rotation_matrix.T)  # Apply rotation matrix
    
    # Step 6: Restore the position of pc2 and rotated_pc1
    rotated_pc1 += pc2_mean
    pc2 += pc2_mean

    # Step 7: Compute the cost of alignment
    distances = np.linalg.norm(pc1 - rotated_pc1, axis=1)
    cost = np.sum(distances)
    return cost


### <stage constraints splitter> ###
### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot at initial timestamp", "the center of the gripper of the robot", "the axis of the hinge of the fridge", "the distance between the center of the gripper of the robot at initial timestamp and the axis of the hinge of the fridge equals the distance between the center of the gripper of the robot and the axis of the hinge of the fridge">"""
    mask1 = segment("the center of the gripper of the robot", 0)
    mask2 = segment("the center of the gripper of the robot", -1)
    mask3 = segment("the axis of the hinge of the fridge", -1)
    
    # Retrieve point clouds
    if mask1.shape[-1] == 3:
        pc1_initial = mask1
        pc1_latest = mask2
        pc3 = mask3
    else:
        pc1_initial = mask_to_pc(mask1)
        pc1_latest = mask_to_pc(mask2)
        pc3 = mask_to_pc(mask3)
    
    # Calculate distances from the gripper to the axis of the hinge
    gripper_initial_distance = np.linalg.norm(np.mean(pc1_initial, axis=0) - np.mean(pc3, axis=0))
    gripper_latest_distance = np.linalg.norm(np.mean(pc1_latest, axis=0) - np.mean(pc3, axis=0))
    
    # The cost is how much these two distances deviate
    cost = abs(gripper_initial_distance - gripper_latest_distance)
    return cost


### <stage constraints splitter> ###
### stage 3 sub-goal constraints
def stage_3_subgoal_constraint1():
    """constraints: <"release">"""
    release()
    return


### List of `geometry of `the object part` of `the object` in all the <> brackets:
object_to_segment = [
    "the area of the handle of the fridge",
    "the plane of the surface of the door of the fridge",
    "the axis of the hinge of the fridge",
    "the center of the gripper of the robot"
]