def stage_2_path_constraint1():
    mask1 = segment("the body of the pen")
    mask2 = segment("the plane of the surface of the table")
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the axis of the pen (pc1)
    covariance_matrix_pen = np.cov(pc1.T)
    eigenvalues_pen, eigenvectors_pen = np.linalg.eig(covariance_matrix_pen)
    pen_axis = eigenvectors_pen[:, np.argmax(eigenvalues_pen)]

    # Calculate the normal vector of the table plane (pc2)
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]

    # Normalize both vectors
    pen_axis = pen_axis / np.linalg.norm(pen_axis)
    table_normal = table_normal / np.linalg.norm(table_normal)
    
    # Compute the dot product between the pen axis and table normal
    dot_product = np.dot(pen_axis, table_normal)

    # The cost is based on how close the dot product is to 0 (which indicates parallel)
    cost = abs(dot_product)
    print("stage 2 path constraint:", cost)
    return 1 - cost

