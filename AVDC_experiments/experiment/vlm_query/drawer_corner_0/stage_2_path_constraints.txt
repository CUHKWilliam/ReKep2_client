def stage_2_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the body of the drawer", "the plane of the surface of the table", "the heading direction of the body of the drawer is parallel to the plane of the surface of the table">"""
    mask1 = segment("the heading direction of the body of the drawer", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the heading direction of the drawer (pc1)
    covariance_matrix_drawer = np.cov(pc1.T)
    eigenvalues_drawer, eigenvectors_drawer = np.linalg.eig(covariance_matrix_drawer)
    drawer_heading = eigenvectors_drawer[:, np.argmax(eigenvalues_drawer)]  # Max PCA component is the heading direction

    # Calculate the normal vector of the table surface (pc2)
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]  # Min PCA component is the normal of the table surface

    # Normalize both vectors
    drawer_heading = drawer_heading / np.linalg.norm(drawer_heading)
    table_normal = table_normal / np.linalg.norm(table_normal)
    
    # The heading direction of the drawer should be parallel to the plane of the table, so the dot product should be 0
    dot_product = np.dot(drawer_heading, table_normal)
    
    # The cost is based on how close the dot product is to 0
    cost = abs(dot_product) * 5.0
    
    return cost

