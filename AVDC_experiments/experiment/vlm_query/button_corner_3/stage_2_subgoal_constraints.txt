def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the plane of the surface of the button of the red button", "the center of the gripper of the robot is 10 cm along the normal of the surface of the button">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the button of the red button", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the normal vector of the button surface (pc2)
    covariance_matrix_button = np.cov(pc2.T)
    eigenvalues_button, eigenvectors_button = np.linalg.eig(covariance_matrix_button)
    button_surface_normal = eigenvectors_button[:, np.argmin(eigenvalues_button)]
    button_surface_normal = button_surface_normal / np.linalg.norm(button_surface_normal)

    # Compute the center of the gripper and the button surface
    gripper_center = np.mean(pc1, axis=0)
    button_surface_center = np.mean(pc2, axis=0)

    # Calculate the distance along the normal of the button surface
    distance_along_normal = np.dot(gripper_center - button_surface_center, button_surface_normal)
    
    # The cost is the deviation from 10 cm
    cost = abs(distance_along_normal - 0.10)
    
    return cost

def stage_2_subgoal_constraint2():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the plane of the surface of the button of the red button", "the center of the gripper of the robot is 10 cm from the surface of the button">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the button of the red button", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the center of the gripper and the button surface
    gripper_center = np.mean(pc1, axis=0)
    button_surface_center = np.mean(pc2, axis=0)

    # Calculate the Euclidean distance between the gripper and the button surface
    distance = np.linalg.norm(gripper_center - button_surface_center)
    
    # The cost is the deviation from 10 cm
    cost = abs(distance - 0.10)
    
    return cost

