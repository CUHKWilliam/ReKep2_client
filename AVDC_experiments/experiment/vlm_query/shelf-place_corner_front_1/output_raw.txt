```python
### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the body of the blue cube"> """
    return grasp("the area of the body of the blue cube")


### <stage constraints splitter> ###
### stage 2 sub-goal constraints (lifting the blue cube vertically)
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the body of the blue cube", "the center of the body of the blue cube at its initial timestamp", "the center of the body of the blue cube is directly above the center of the body of the blue cube at its initial timestamp by more than 10 centimeters">"""
    mask1 = segment("the center of the body of the blue cube", -1)
    mask2 = segment("the center of the body of the blue cube", 0)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the blue cube at the latest and initial timestamps
    center_latest = np.mean(pc1, axis=0)
    center_initial = np.mean(pc2, axis=0)
    
    # Calculate the vertical distance (z-axis) between the centers
    vertical_distance = center_latest[2] - center_initial[2]
    
    # The cost is based on how far the cube is lifted vertically (should be more than 10 cm)
    cost = max(0, 0.1 - vertical_distance)
    
    return cost


### <stage constraints splitter> ###
### stage 2 path constraints (lifting the blue cube vertically)
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the body of the blue cube", "the plane of the surface of the table", "the center of the body of the blue cube moves vertically away from the plane of the surface of the table">"""
    mask1 = segment("the center of the body of the blue cube", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the blue cube and the table surface
    center_cube = np.mean(pc1, axis=0)
    table_surface = np.mean(pc2, axis=0)
    
    # Calculate the vertical distance (z-axis) between the cube and the table surface
    vertical_distance = center_cube[2] - table_surface[2]
    
    # The cost is based on how far the cube is lifted vertically from the table surface
    cost = max(0, 0.1 - vertical_distance)
    
    return cost


### <stage constraints splitter> ###
### stage 3 sub-goal constraints (moving the blue cube to the middle stack of the shelf)
def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the body of the blue cube", "the center of the middle stack of the shelf", "the center of the body of the blue cube is directly above the center of the middle stack of the shelf by around 5 centimeters">"""
    mask1 = segment("the center of the body of the blue cube", -1)
    mask2 = segment("the center of the middle stack of the shelf", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the blue cube and the middle stack of the shelf
    center_cube = np.mean(pc1, axis=0)
    center_shelf = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(center_cube[:2] - center_shelf[:2])
    
    # Calculate the vertical distance (z-axis) between the cube and the shelf (should be around 5 cm)
    vertical_distance = abs(center_cube[2] - center_shelf[2] - 0.05)
    
    # The cost is based on the deviation from the ideal position
    cost = horizontal_distance + vertical_distance
    
    return cost


### <stage constraints splitter> ###
### stage 3 path constraints (moving the blue cube to the middle stack of the shelf)
def stage_3_path_constraint1():
    """constraints: <"path constraints", "the center of the body of the blue cube", "the center of the middle stack of the shelf", "the center of the body of the blue cube moves horizontally towards the center of the middle stack of the shelf">"""
    mask1 = segment("the center of the body of the blue cube", -1)
    mask2 = segment("the center of the middle stack of the shelf", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the blue cube and the middle stack of the shelf
    center_cube = np.mean(pc1, axis=0)
    center_shelf = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(center_cube[:2] - center_shelf[:2])
    
    # The cost is based on how far the cube is from the shelf horizontally
    cost = horizontal_distance
    
    return cost


### <stage constraints splitter> ###
### stage 4 sub-goal constraints (releasing the blue cube)
def stage_4_subgoal_constraint1():
    """constraints: <"release">"""
    release()
    return


### List of `geometry` of `the object part` of `the object` in all the <> brackets:
object_to_segment = [
    "the center of the body of the blue cube",
    "the center of the middle stack of the shelf",
    "the plane of the surface of the table"
]
```