def stage_3_path_constraint1():
    """constraints: <"path constraints", "the axis of the body of the hammer", "the axis of the body of the black nail", "the axis of the body of the hammer is parallel to the axis of the body of the black nail">"""
    mask1 = segment("the axis of the body of the hammer", -1)
    mask2 = segment("the axis of the body of the black nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the axis of the hammer
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)

    # Compute the axis of the black nail
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]
    nail_axis = nail_axis / np.linalg.norm(nail_axis)

    # Compute the dot product between the hammer axis and the nail axis
    dot_product = np.dot(hammer_axis, nail_axis)

    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(1 - dot_product) * 5.
    
    return cost

