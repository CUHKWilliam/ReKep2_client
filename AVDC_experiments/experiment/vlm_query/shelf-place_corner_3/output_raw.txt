```python
### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the body of the blue cube"> """
    return grasp("the area of the body of the blue cube")


### <stage constraints splitter> ###
### stage 2 sub-goal constraints
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the body of the blue cube", "the center of the second layer of the shelf", "the center of the body of the blue cube is directly above the center of the second layer of the shelf by around 10 centimeters">"""
    mask1 = segment("the center of the body of the blue cube", -1)
    mask2 = segment("the center of the second layer of the shelf", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the blue cube and the second layer of the shelf
    blue_cube_center = np.mean(pc1, axis=0)
    second_layer_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(blue_cube_center[:2] - second_layer_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = blue_cube_center[2] - second_layer_center[2] - 0.1  # 10 cm above
    
    cost = abs(vertical_distance) + horizontal_distance
    
    return cost


def stage_2_subgoal_constraint2():
    """constraints: <"sub-goal constraints", "the plane of the surface of the second layer of the shelf", "the plane of the surface of the table", "the plane of the surface of the second layer of the shelf is above the plane of the surface of the table by more than 20 centimeters">"""
    mask1 = segment("the plane of the surface of the second layer of the shelf", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean z-coordinate of the second layer and the table
    second_layer_z = np.mean(pc1[:, 2])
    table_z = np.mean(pc2[:, 2])
    
    # The second layer should be more than 20 cm above the table
    vertical_distance = second_layer_z - table_z - 0.2  # 20 cm
    
    cost = abs(vertical_distance)
    
    return cost


### <stage constraints splitter> ###
### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the plane of the surface of the second layer of the shelf", "the plane of the surface of the table", "the plane of the surface of the second layer of the shelf is above the plane of the surface of the table by more than 20 centimeters">"""
    mask1 = segment("the plane of the surface of the second layer of the shelf", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean z-coordinate of the second layer and the table
    second_layer_z = np.mean(pc1[:, 2])
    table_z = np.mean(pc2[:, 2])
    
    # The second layer should be more than 20 cm above the table
    vertical_distance = second_layer_z - table_z - 0.2  # 20 cm
    
    cost = abs(vertical_distance)
    
    return cost


### <stage constraints splitter> ###
### stage 3 sub-goal constraints (releasing)
def stage_3_subgoal_constraint1():
    """constraints: <"release"> """
    release()
    return


### List of `geometry` of `the object part` of `the object` in all the <> brackets:
object_to_segment = [
    "the area of the body of the blue cube",
    "the center of the body of the blue cube",
    "the center of the second layer of the shelf",
    "the plane of the surface of the second layer of the shelf",
    "the plane of the surface of the table"
]
```