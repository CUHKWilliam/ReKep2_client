def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the head of the hammer", "the center of the top of the nail", "the center of the head of the hammer is directly above the center of the top of the nail around 10 centimeters">"""
    mask1 = segment("the center of the head of the hammer", -1)
    mask2 = segment("the center of the top of the nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the hammer head and the nail top
    hammer_head_center = np.mean(pc1, axis=0)
    nail_top_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(hammer_head_center[:2] - nail_top_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = hammer_head_center[2] - nail_top_center[2] - 0.1  # 10 cm above
    
    cost = abs(vertical_distance) + horizontal_distance
    return cost

def stage_2_subgoal_constraint2():
    """constraints: <"sub-goal constraints", "the axis of the handle of the hammer", "the axis of the nail", "the axis of the handle of the hammer is parallel to the axis of the nail">"""
    mask1 = segment("the axis of the handle of the hammer", -1)
    mask2 = segment("the axis of the nail", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the axis of the hammer handle (pc1)
    covariance_matrix_hammer = np.cov(pc1.T)
    eigenvalues_hammer, eigenvectors_hammer = np.linalg.eig(covariance_matrix_hammer)
    hammer_axis = eigenvectors_hammer[:, np.argmax(eigenvalues_hammer)]

    # Calculate the axis of the nail (pc2)
    covariance_matrix_nail = np.cov(pc2.T)
    eigenvalues_nail, eigenvectors_nail = np.linalg.eig(covariance_matrix_nail)
    nail_axis = eigenvectors_nail[:, np.argmax(eigenvalues_nail)]

    # Normalize both vectors
    hammer_axis = hammer_axis / np.linalg.norm(hammer_axis)
    nail_axis = nail_axis / np.linalg.norm(nail_axis)
    
    # Compute the dot product between the hammer axis and nail axis
    dot_product = np.dot(hammer_axis, nail_axis)
    
    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(1 - dot_product) * 5.
    return cost

