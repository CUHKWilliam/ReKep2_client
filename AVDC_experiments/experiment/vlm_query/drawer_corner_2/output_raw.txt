### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the drawer"> """
    return grasp("the area of the handle of the drawer")

### <stage constraints splitter> ###
### stage 2 target constraints (pulling the drawer)
def stage_2_target_constraint1():
    """constraints: <"targets constraints", "the center of the handle of the drawer", "the center of the body of the drawer", "the center of the handle of the drawer moves against the center of the body of the drawer by around 30 centimeters">"""
    mask1 = segment("the center of the handle of the drawer", -1)
    mask2 = segment("the center of the body of the drawer", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the handle and the body of the drawer
    handle_center = np.mean(pc1, axis=0)
    body_center = np.mean(pc2, axis=0)
    
    # Calculate the distance between the handle and the body of the drawer
    distance = np.linalg.norm(handle_center - body_center)
    
    # The target distance is 30 cm
    target_distance = 0.30
    
    # The cost is the difference between the current distance and the target distance
    cost = abs(distance - target_distance)
    
    return cost

### <stage constraints splitter> ###
### stage 2 path constraints (pulling the drawer)
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the handle of the drawer", "the heading direction of the body of the drawer", "the heading direction of the handle of the drawer is parallel to the heading direction of the body of the drawer">"""
    mask1 = segment("the heading direction of the handle of the drawer", -1)
    mask2 = segment("the heading direction of the body of the drawer", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the heading direction of the handle of the drawer (pc1)
    covariance_matrix_handle = np.cov(pc1.T)
    eigenvalues_handle, eigenvectors_handle = np.linalg.eig(covariance_matrix_handle)
    handle_heading = eigenvectors_handle[:, np.argmax(eigenvalues_handle)]

    # Calculate the heading direction of the body of the drawer (pc2)
    covariance_matrix_body = np.cov(pc2.T)
    eigenvalues_body, eigenvectors_body = np.linalg.eig(covariance_matrix_body)
    body_heading = eigenvectors_body[:, np.argmax(eigenvalues_body)]

    # Normalize both vectors
    handle_heading = handle_heading / np.linalg.norm(handle_heading)
    body_heading = body_heading / np.linalg.norm(body_heading)
    
    # Compute the dot product between the handle heading and body heading
    dot_product = np.dot(handle_heading, body_heading)
    
    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(dot_product - 1) * 5.
    
    return cost

### <stage constraints splitter> ###
### stage 3 sub-goal constraints (releasing)
def stage_3_subgoal_constraint1():
    """constraints: <"release"> """
    release()
    return

### List of "`geometry` of `the object part` of `the object`" in all the <> brackets:
object_to_segment = [
    "the area of the handle of the drawer",
    "the center of the handle of the drawer",
    "the center of the body of the drawer",
    "the heading direction of the handle of the drawer",
    "the heading direction of the body of the drawer"
]