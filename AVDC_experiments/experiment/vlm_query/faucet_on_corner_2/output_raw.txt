```python
### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the red faucet"> """
    return grasp("the area of the handle of the red faucet")


### <stage constraints splitter> ###
### stage 2 target constraints
def stage_2_target_constraint1():
    """constraints: <"target constraints", "the center of the handle of the red faucet", "the axis of the body of the red faucet", "the center of the handle of the red faucet rotates around the axis of the body of the red faucet by at least 90 degrees">"""
    # Segment the center of the handle and the axis of the body of the red faucet
    mask1_current = segment("the center of the handle of the red faucet", -1)  # Current position
    mask1 = segment("the center of the handle of the red faucet", -2)  # Initial position
    mask2 = segment("the axis of the body of the red faucet", -2)  # Axis of the faucet

    # Convert masks to point clouds if necessary
    if mask1.shape[-1] == 3:
        pc1_current = mask1_current
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_current = mask_to_pc(mask1_current)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Normalize the axis of the body of the red faucet (from pc2)
    covariance_matrix_faucet = np.cov(pc2.T)
    eigenvalues_faucet, eigenvectors_faucet = np.linalg.eig(covariance_matrix_faucet)
    faucet_axis = eigenvectors_faucet[:, np.argmax(eigenvalues_faucet)]
    faucet_axis = faucet_axis / np.linalg.norm(faucet_axis)  # Normalize the axis vector

    # Step 2: Convert the angle from degrees to radians (90 degrees)
    angle_degrees = 90
    angle_radians = np.radians(angle_degrees)

    # Step 3: Compute the rotation matrix using Rodrigues' rotation formula
    K = np.array([[0, -faucet_axis[2], faucet_axis[1]],
                  [faucet_axis[2], 0, -faucet_axis[0]],
                  [-faucet_axis[1], faucet_axis[0], 0]])  # Skew-symmetric matrix for faucet_axis
    I = np.eye(3)  # Identity matrix
    rotation_matrix = I + np.sin(angle_radians) * K + (1 - np.cos(angle_radians)) * np.dot(K, K)

    # Step 4: Rotate each point in pc1 (initial position of the handle)
    rotated_pc1 = np.dot(pc1 - pc2.mean(0), rotation_matrix.T) + pc2.mean(0)  # Apply rotation matrix to the pc1

    # Step 5: Compute the cost of how the current pc1 aligns with rotated_pc1
    distances = np.linalg.norm(pc1_current - rotated_pc1, axis=1)  # Use the current pc1 to calculate the cost
    cost = np.sum(distances)
    
    return cost


### <stage constraints splitter> ###
### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the handle of the red faucet", "the axis of the body of the red faucet", "the center of the handle of the red faucet moves along the axis of the body of the red faucet">"""
    # Segment the center of the handle and the axis of the body of the red faucet
    mask1 = segment("the center of the handle of the red faucet", -1)  # Current position
    mask2 = segment("the axis of the body of the red faucet", -1)  # Axis of the faucet

    # Convert masks to point clouds if necessary
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Normalize the axis of the body of the red faucet (from pc2)
    covariance_matrix_faucet = np.cov(pc2.T)
    eigenvalues_faucet, eigenvectors_faucet = np.linalg.eig(covariance_matrix_faucet)
    faucet_axis = eigenvectors_faucet[:, np.argmax(eigenvalues_faucet)]
    faucet_axis = faucet_axis / np.linalg.norm(faucet_axis)  # Normalize the axis vector

    # Step 2: Compute the projection of the handle's center onto the faucet axis
    handle_center = np.mean(pc1, axis=0)
    faucet_center = np.mean(pc2, axis=0)
    projection = np.dot(handle_center - faucet_center, faucet_axis) * faucet_axis + faucet_center

    # Step 3: Compute the cost as the distance between the handle's center and its projection onto the faucet axis
    cost = np.linalg.norm(handle_center - projection)
    
    return cost


### <stage constraints splitter> ###
### stage 2 path constraints (optional)
def stage_2_path_constraint2():
    """constraints: <"path constraints", "the center of the handle of the red faucet", "the plane of the surface of the table", "the center of the handle of the red faucet remains above the plane of the surface of the table">"""
    # Segment the center of the handle and the plane of the surface of the table
    mask1 = segment("the center of the handle of the red faucet", -1)  # Current position
    mask2 = segment("the plane of the surface of the table", -1)  # Plane of the table

    # Convert masks to point clouds if necessary
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Compute the normal vector of the plane of the surface of the table (from pc2)
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]
    table_normal = table_normal / np.linalg.norm(table_normal)  # Normalize the normal vector

    # Step 2: Compute the distance between the handle's center and the table's surface
    handle_center = np.mean(pc1, axis=0)
    table_center = np.mean(pc2, axis=0)
    distance_to_table = np.dot(handle_center - table_center, table_normal)

    # Step 3: The cost is the negative distance if the handle is below the table, otherwise 0
    cost = max(0, -distance_to_table)
    
    return cost


### <stage constraints splitter> ###
### stage 2 sub-goal constraints (optional)
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the handle of the red faucet", "the center of the body of the red faucet", "the center of the handle of the red faucet remains within 10 cm of the center of the body of the red faucet">"""
    # Segment the center of the handle and the center of the body of the red faucet
    mask1 = segment("the center of the handle of the red faucet", -1)  # Current position
    mask2 = segment("the center of the body of the red faucet", -1)  # Center of the faucet body

    # Convert masks to point clouds if necessary
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Compute the distance between the handle's center and the faucet's body center
    handle_center = np.mean(pc1, axis=0)
    faucet_center = np.mean(pc2, axis=0)
    distance = np.linalg.norm(handle_center - faucet_center)

    # Step 2: The cost is the deviation from 10 cm
    cost = abs(distance - 0.10)
    
    return cost


### <stage constraints splitter> ###
### stage 3 sub-goal constraints (release)
def stage_3_subgoal_constraint1():
    """constraints: <"release"> """
    release()
    return


# Enumerate all the `geometry` of `the object part` of `the object` in all the constraints and all the grasp stages
object_to_segment = [
    "the area of the handle of the red faucet",
    "the center of the handle of the red faucet",
    "the axis of the body of the red faucet",
    "the plane of the surface of the table",
    "the center of the body of the red faucet"
]
```