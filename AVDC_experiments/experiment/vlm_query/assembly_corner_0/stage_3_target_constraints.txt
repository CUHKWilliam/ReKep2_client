def stage_3_target_constraint1():
    """constraints: <"target constraints", "the center of the hole of the round ring", "the center of the top of the red peg", "the center of the hole of the round ring reaches the center of the top of the red peg">"""
    mask1 = segment("the center of the hole of the round ring", -1)
    mask2 = segment("the center of the top of the red peg", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the hole of the round ring and the top of the red peg
    hole_center = np.mean(pc1, axis=0)
    peg_top_center = np.mean(pc2, axis=0)
    
    # Calculate the distance between the centers
    distance = np.linalg.norm(hole_center - peg_top_center)
    
    return distance

def stage_3_target_constraint2():
    """constraints: <"path constraints", "the axis of the hole of the round ring", "the axis of the red peg", "the axis of the hole of the round ring remains parallel to the axis of the red peg">"""
    mask1 = segment("the axis of the hole of the round ring", -1)
    mask2 = segment("the axis of the red peg", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the axis of the hole of the round ring (pc1)
    covariance_matrix_ring = np.cov(pc1.T)
    eigenvalues_ring, eigenvectors_ring = np.linalg.eig(covariance_matrix_ring)
    ring_axis = eigenvectors_ring[:, np.argmax(eigenvalues_ring)]

    # Calculate the axis of the red peg (pc2)
    covariance_matrix_peg = np.cov(pc2.T)
    eigenvalues_peg, eigenvectors_peg = np.linalg.eig(covariance_matrix_peg)
    peg_axis = eigenvectors_peg[:, np.argmax(eigenvalues_peg)]

    # Normalize both vectors
    ring_axis = ring_axis / np.linalg.norm(ring_axis)
    peg_axis = peg_axis / np.linalg.norm(peg_axis)
    
    # Compute the dot product between the ring axis and peg axis
    dot_product = np.dot(ring_axis, peg_axis)
    
    # The cost is based on how close the dot product is to 1 (parallel)
    cost = abs(1 - dot_product) * 5.
    
    return cost

