def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the handle of the red faucet", "the axis of the body of the red faucet", "the center of the handle of the red faucet remains on the same plane as it rotates around the axis of the body of the red faucet">"""
    mask1_current = segment("the center of the handle of the red faucet", -1)  # Current position of the handle
    mask1 = segment("the center of the handle of the red faucet", -2)  # Position of the handle at the time of grasping
    mask2 = segment("the axis of the body of the red faucet", -2)  # Axis of the faucet

    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1_current = mask1_current
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_current = mask_to_pc(mask1_current)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Step 1: Normalize the axis of the body of the red faucet (from pc2)
    covariance_matrix_faucet = np.cov(pc2.T)
    eigenvalues_faucet, eigenvectors_faucet = np.linalg.eig(covariance_matrix_faucet)
    faucet_axis = eigenvectors_faucet[:, np.argmax(eigenvalues_faucet)]
    faucet_axis = faucet_axis / np.linalg.norm(faucet_axis)  # Normalize the axis vector

    # Step 2: Project the center of the handle onto the plane perpendicular to the faucet axis
    handle_center_current = np.mean(pc1_current, axis=0)
    handle_center_initial = np.mean(pc1, axis=0)
    projection_current = handle_center_current - np.dot(handle_center_current - handle_center_initial, faucet_axis) * faucet_axis
    projection_initial = handle_center_initial - np.dot(handle_center_initial - handle_center_initial, faucet_axis) * faucet_axis

    # Step 3: Compute the cost as the distance between the projections
    cost = np.linalg.norm(projection_current - projection_initial)
    return cost

