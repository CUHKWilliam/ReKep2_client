def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the gripper of the robot", "the plane of the surface of the red button of the button", "the center of the gripper of the robot moves along the normal of the surface of the red button of the button">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the red button of the button", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the normal vector of the plane of the surface of the red button
    covariance_matrix_button = np.cov(pc2.T)
    eigenvalues_button, eigenvectors_button = np.linalg.eig(covariance_matrix_button)
    button_surface_normal = eigenvectors_button[:, np.argmin(eigenvalues_button)]
    button_surface_normal = button_surface_normal / np.linalg.norm(button_surface_normal)

    # Compute the center of the gripper and the button
    gripper_center = np.mean(pc1, axis=0)
    button_center = np.mean(pc2, axis=0)

    # Calculate the distance along the normal of the button surface
    distance_along_normal = np.dot(gripper_center - button_center, button_surface_normal)

    # The cost is the deviation from the desired path along the normal
    cost = abs(distance_along_normal)
    
    return cost

