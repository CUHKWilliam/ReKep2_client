def stage_2_path_constraint1():
    """constraints: <"path constraints", "the axis of the handle of the red handle", "the plane of the surface of the table", "the axis of the handle of the red handle remains perpendicular to the plane of the surface of the table">"""
    mask1 = segment("the axis of the handle of the red handle", -1)
    mask2 = segment("the plane of the surface of the table", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
    
    # Calculate the axis of the handle of the red handle (pc1)
    covariance_matrix_handle = np.cov(pc1.T)
    eigenvalues_handle, eigenvectors_handle = np.linalg.eig(covariance_matrix_handle)
    handle_axis = eigenvectors_handle[:, np.argmax(eigenvalues_handle)]
    
    # Calculate the normal vector of the plane of the surface of the table (pc2)
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]
    
    # Normalize both vectors
    handle_axis = handle_axis / np.linalg.norm(handle_axis)
    table_normal = table_normal / np.linalg.norm(table_normal)
    
    # Compute the dot product between the handle axis and the table normal
    dot_product = np.dot(handle_axis, table_normal)
    
    # The cost is based on how close the dot product is to 0 (perpendicular)
    cost = abs(dot_product) * 5.0
    
    return cost

