def stage_2_targets_constraint1():
    """constraints: <"targets constraints", "the plane of the surface of the door of the fridge", "the axis of the hinge of the fridge", "the plane of the surface of the door of the fridge rotates around the axis of the hinge of the fridge by 90 degrees">"""
    mask1 = segment("the plane of the surface of the door of the fridge", -1)
    mask1_initial = segment("the plane of the surface of the door of the fridge", 0)
    mask2 = segment("the axis of the hinge of the fridge", -1)
    
    # Retrieve point clouds
    if mask1.shape[-1] == 3:
        pc1_initial = mask1_initial.copy()
        pc1 = mask1
        pc2 = mask2
    else:
        pc1_initial = mask_to_pc(mask1_initial)
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
    
    # Step 1: center pc1_initial at the center of pc2
    pc2_mean = pc2.mean(0)
    pc2 -= pc2_mean
    pc1_initial -= pc2_mean

    # Step 2: Normalize the axis of the hinge of the fridge door (from pc2)
    covariance_matrix_door = np.cov(pc2.T)
    eigenvalues_door, eigenvectors_door = np.linalg.eig(covariance_matrix_door)
    fridge_axis = eigenvectors_door[:, np.argmax(eigenvalues_door)]
    fridge_axis = fridge_axis / np.linalg.norm(fridge_axis)  # Normalize the axis vector

    # Step 3: Convert angle to radians (90 degrees in this case)
    angle_radians = np.radians(-90)

    # Step 4: Compute the rotation matrix using Rodrigues' rotation formula
    K = np.array([[0, -fridge_axis[2], fridge_axis[1]],
                  [fridge_axis[2], 0, -fridge_axis[0]],
                  [-fridge_axis[1], fridge_axis[0], 0]])  # Skew-symmetric matrix for the axis
    I = np.eye(3)  # Identity matrix
    rotation_matrix = I + np.sin(angle_radians) * K + (1 - np.cos(angle_radians)) * np.dot(K, K)
    
    # Step 5: Apply the rotation
    rotated_pc1 = np.dot(pc1_initial, rotation_matrix.T)  # Apply rotation matrix
    
    # Step 6: Restore the position of pc2 and rotated_pc1
    rotated_pc1 += pc2_mean
    pc2 += pc2_mean

    # Step 7: Compute the cost of alignment
    distances = np.linalg.norm(pc1[:, :] - rotated_pc1[:, :], axis=1)
    cost = np.sum(distances)

    print("stage 2 target cost:", cost)
    
    # import open3d as o3d
    # pcd = o3d.geometry.PointCloud()
    # pcd.points = o3d.utility.Vector3dVector(rotated_pc1)
    # o3d.io.write_point_cloud('debug1.ply', pcd)
    # pcd.points = o3d.utility.Vector3dVector(pc1)
    # o3d.io.write_point_cloud('debug2.ply', pcd)
    # import ipdb;ipdb.set_trace()
    return cost

