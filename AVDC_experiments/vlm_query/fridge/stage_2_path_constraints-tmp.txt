def stage_2_path_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot at initial timestamp", "the center of the gripper of the robot", "the axis of the hinge of the fridge", "the distance between the center of the gripper of the robot at initial timestamp and the axis of the hinge of the fridge equals the distance between the center of the gripper of the robot and the axis of the hinge of the fridge">"""
    mask1 = segment("the center of the gripper of the robot", 0)
    mask2 = segment("the center of the gripper of the robot", -1)
    mask3 = segment("the axis of the hinge of the fridge", -1)
    
    # Retrieve point clouds
    if mask1.shape[-1] == 3:
        pc1_initial = mask1
        pc1_latest = mask2
        pc3 = mask3
    else:
        pc1_initial = mask_to_pc(mask1)
        pc1_latest = mask_to_pc(mask2)
        pc3 = mask_to_pc(mask3)
    
    # Calculate distances from the gripper to the axis of the hinge
    gripper_initial_distance = np.linalg.norm(np.mean(pc1_initial, axis=0) - np.mean(pc3, axis=0))
    gripper_latest_distance = np.linalg.norm(np.mean(pc1_latest, axis=0) - np.mean(pc3, axis=0))
    
    # The cost is how much these two distances deviate
    cost = abs(gripper_initial_distance - gripper_latest_distance)
    return cost

