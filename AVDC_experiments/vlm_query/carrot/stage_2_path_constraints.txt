def stage_2_path_constraint1():
    """constraints: <"path constraints", "the axis of the carrot", "the plane of the blade of the kitchen knife", "the axis of the carrot is perpendicular to the plane of the blade of the kitchen knife"> """
    mask1 = segment("the axis of the carrot", -1)
    mask2 = segment("the plane of the blade of the kitchen knife", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the axis of the carrot (pc1)
    covariance_matrix_carrot = np.cov(pc1.T)
    eigenvalues_carrot, eigenvectors_carrot = np.linalg.eig(covariance_matrix_carrot)
    carrot_axis = eigenvectors_carrot[:, np.argmax(eigenvalues_carrot)]

    # Calculate the normal vector of the plane of the blade (pc2)
    covariance_matrix_knife = np.cov(pc2.T)
    eigenvalues_knife, eigenvectors_knife = np.linalg.eig(covariance_matrix_knife)
    knife_blade_normal = eigenvectors_knife[:, np.argmin(eigenvalues_knife)]

    # Normalize the vectors
    carrot_axis = carrot_axis / np.linalg.norm(carrot_axis)
    knife_blade_normal = knife_blade_normal / np.linalg.norm(knife_blade_normal)
    
    # Compute the dot product (it should be close to zero for perpendicularity)
    dot_product = np.dot(carrot_axis, knife_blade_normal)
    
    cost = (1 - abs(dot_product)) * 5.  # Increase weight for angular constraints
    
    return cost

def stage_2_path_constraint2():
    """constraints: <"path constraints", "the heading direction of the blade of the kitchen knife", "the plane of the surface of the table", "the heading direction of the blade of the kitchen knife is parallel to the plane of the surface of the table"> """
    mask1 = segment("the heading direction of the blade of the kitchen knife", -1)
    mask2 = segment("the plane of the surface of the table", -1)

    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the heading direction of the knife blade (pc1)
    covariance_matrix_knife = np.cov(pc1.T)
    eigenvalues_knife, eigenvectors_knife = np.linalg.eig(covariance_matrix_knife)
    knife_blade_heading = eigenvectors_knife[:, np.argmax(eigenvalues_knife)]

    # Calculate the normal vector of the plane of the surface of the table (pc2)
    covariance_matrix_table = np.cov(pc2.T)
    eigenvalues_table, eigenvectors_table = np.linalg.eig(covariance_matrix_table)
    table_surface_normal = eigenvectors_table[:, np.argmin(eigenvalues_table)]

    # Normalize both directions
    knife_blade_heading = knife_blade_heading / np.linalg.norm(knife_blade_heading)
    table_surface_normal = table_surface_normal / np.linalg.norm(table_surface_normal)

    # Compute the dot product for alignment
    dot_product = np.dot(knife_blade_heading, table_surface_normal)

    cost = dot_product * 5.

    return cost

