def stage_1_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the key of the C note of the piano", "the center of the gripper of the robot is directly above the center of the key of the C note of the piano">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the key of the C note of the piano", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
    
    # Compute the mean positions
    gripper_center = np.mean(pc1, axis=0)
    key_center = np.mean(pc2, axis=0)
    
    # Calculate the distance between the gripper and the key
    cost = np.linalg.norm(gripper_center - key_center)
    
    return cost

def stage_1_subgoal_constraint2():
    """constraints: <"sub-goal constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the key of the C note of the piano", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the key of the C note of the piano">"""
    mask1 = segment("the heading direction of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the key of the C note of the piano", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
    
    # Calculate the normal vector of the plane of the key
    covariance_matrix_key = np.cov(pc2.T)
    eigenvalues_key, eigenvectors_key = np.linalg.eig(covariance_matrix_key)
    key_surface_normal = eigenvectors_key[:, np.argmin(eigenvalues_key)]
    
    # Normalize both vectors
    key_surface_normal = key_surface_normal / np.linalg.norm(key_surface_normal)
    gripper_heading = pc1 / np.linalg.norm(pc1)
    
    # Compute the dot product between the gripper heading and the key surface normal
    dot_product = np.dot(gripper_heading, key_surface_normal)
    
    # The cost is based on how close the dot product is to 0 (perpendicular)
    cost = abs(dot_product) * 5.
    
    return cost

