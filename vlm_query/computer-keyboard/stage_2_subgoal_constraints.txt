def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the H key of the keyboard", "the center of the gripper of the robot is directly above the center of the H key of the keyboard around 5 centimeters">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the H key of the keyboard", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the H key
    gripper_center = np.mean(pc1, axis=0)
    h_key_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(gripper_center[:2] - h_key_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = abs(gripper_center[2] - h_key_center[2] - 0.30)  # 5 cm above
    
    # The cost is the sum of horizontal and vertical deviations
    cost = horizontal_distance + vertical_distance
    
    return cost

