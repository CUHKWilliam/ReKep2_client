```python
### <stage constraints splitter> ###
### stage 1 sub-goal constraints
def stage_1_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the H key of the keyboard", "the center of the gripper of the robot is directly above the center of the H key of the keyboard around 5 centimeters">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the H key of the keyboard", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the H key
    gripper_center = np.mean(pc1, axis=0)
    h_key_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(gripper_center[:2] - h_key_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = abs(gripper_center[2] - h_key_center[2] - 0.05)  # 5 cm above
    
    # The cost is the sum of horizontal and vertical deviations
    cost = horizontal_distance + vertical_distance
    
    return cost

### stage 1 path constraints
def stage_1_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the H key of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the H key of the keyboard">"""
    mask1 = segment("the heading direction of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the H key of the keyboard", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the normal vector of the plane of the H key (pc2)
    covariance_matrix_h_key = np.cov(pc2.T)
    eigenvalues_h_key, eigenvectors_h_key = np.linalg.eig(covariance_matrix_h_key)
    h_key_surface_normal = eigenvectors_h_key[:, np.argmin(eigenvalues_h_key)]

    # Calculate the heading direction of the gripper (pc1)
    covariance_matrix_gripper = np.cov(pc1.T)
    eigenvalues_gripper, eigenvectors_gripper = np.linalg.eig(covariance_matrix_gripper)
    gripper_heading_direction = eigenvectors_gripper[:, np.argmax(eigenvalues_gripper)]

    # Normalize both vectors
    h_key_surface_normal = h_key_surface_normal / np.linalg.norm(h_key_surface_normal)
    gripper_heading_direction = gripper_heading_direction / np.linalg.norm(gripper_heading_direction)
    
    # Compute the dot product between the gripper heading and the H key surface normal
    dot_product = np.dot(gripper_heading_direction, h_key_surface_normal)
    
    # The cost is based on how close the dot product is to 1 (perpendicular)
    cost = abs(dot_product) * 5.
    
    return cost

### <stage constraints splitter> ###
### stage 2 target constraints
def stage_2_target_constraint1():
    """constraints: <"target constraints", "the center of the gripper of the robot", "the center of the H key of the keyboard", "the center of the gripper of the robot reaches the center of the H key of the keyboard">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the H key of the keyboard", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the H key
    gripper_center = np.mean(pc1, axis=0)
    h_key_center = np.mean(pc2, axis=0)
    
    # Calculate the distance between the gripper and the H key
    distance = np.linalg.norm(gripper_center - h_key_center)
    
    # The cost is the distance between the gripper and the H key
    cost = distance
    
    return cost

### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the H key of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the H key of the keyboard">"""
    return stage_1_path_constraint1()  # Reuse the same constraint as stage 1

### <stage constraints splitter> ###
### stage 3 sub-goal constraints
def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the I key of the keyboard", "the center of the gripper of the robot is directly above the center of the I key of the keyboard around 5 centimeters">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the I key of the keyboard", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the I key
    gripper_center = np.mean(pc1, axis=0)
    i_key_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(gripper_center[:2] - i_key_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = abs(gripper_center[2] - i_key_center[2] - 0.05)  # 5 cm above
    
    # The cost is the sum of horizontal and vertical deviations
    cost = horizontal_distance + vertical_distance
    
    return cost

### stage 3 path constraints
def stage_3_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the I key of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the I key of the keyboard">"""
    mask1 = segment("the heading direction of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the I key of the keyboard", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the normal vector of the plane of the I key (pc2)
    covariance_matrix_i_key = np.cov(pc2.T)
    eigenvalues_i_key, eigenvectors_i_key = np.linalg.eig(covariance_matrix_i_key)
    i_key_surface_normal = eigenvectors_i_key[:, np.argmin(eigenvalues_i_key)]

    # Calculate the heading direction of the gripper (pc1)
    covariance_matrix_gripper = np.cov(pc1.T)
    eigenvalues_gripper, eigenvectors_gripper = np.linalg.eig(covariance_matrix_gripper)
    gripper_heading_direction = eigenvectors_gripper[:, np.argmax(eigenvalues_gripper)]

    # Normalize both vectors
    i_key_surface_normal = i_key_surface_normal / np.linalg.norm(i_key_surface_normal)
    gripper_heading_direction = gripper_heading_direction / np.linalg.norm(gripper_heading_direction)
    
    # Compute the dot product between the gripper heading and the I key surface normal
    dot_product = np.dot(gripper_heading_direction, i_key_surface_normal)
    
    # The cost is based on how close the dot product is to 1 (perpendicular)
    cost = abs(dot_product) * 5.
    
    return cost

### <stage constraints splitter> ###
### stage 4 target constraints
def stage_4_target_constraint1():
    """constraints: <"target constraints", "the center of the gripper of the robot", "the center of the I key of the keyboard", "the center of the gripper of the robot reaches the center of the I key of the keyboard">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the I key of the keyboard", -1)
    
    # Convert masks to point clouds
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the I key
    gripper_center = np.mean(pc1, axis=0)
    i_key_center = np.mean(pc2, axis=0)
    
    # Calculate the distance between the gripper and the I key
    distance = np.linalg.norm(gripper_center - i_key_center)
    
    # The cost is the distance between the gripper and the I key
    cost = distance
    
    return cost

### stage 4 path constraints
def stage_4_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the I key of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the I key of the keyboard">"""
    return stage_3_path_constraint1()  # Reuse the same constraint as stage 3

### <stage constraints splitter> ###

object_to_segment = [
    "the center of the gripper of the robot",
    "the center of the H key of the keyboard",
    "the plane of the surface of the H key of the keyboard",
    "the heading direction of the gripper of the robot",
    "the center of the I key of the keyboard",
    "the plane of the surface of the I key of the keyboard"
]
```