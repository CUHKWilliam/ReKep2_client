### <stage constraints splitter> ###
### stage 1 sub-goal constraints (grasping)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the area of the handle of the fridge door">"""
    return grasp("the area of the handle of the fridge door")

### <stage constraints splitter> ###
### stage 2 target constraints
def stage_2_target_constraint1():
    """constraints: <"targets constraints", "the plane of the surface of the fridge door", "the axis of the hinge of the fridge", "the plane of the surface of the fridge door rotates around the axis of the hinge of the fridge by around 90 degrees">"""
    mask1 = segment("the plane of the surface of the fridge door", -1)
    mask2 = segment("the plane of the surface of the fridge door", 0)
    mask3 = segment("the axis of the hinge of the fridge", -1)
    
    # Ensure point clouds are in the correct shape
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
        pc3 = mask3
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
        pc3 = mask_to_pc(mask3)
    
    # Center pc1 and pc2 around the hinge
    pc3_mean = np.mean(pc3, axis=0)
    pc1 -= pc3_mean
    pc2 -= pc3_mean
    
    # Find the axis of the hinge using PCA
    covariance_matrix_hinge = np.cov(pc3.T)
    eigenvalues_hinge, eigenvectors_hinge = np.linalg.eig(covariance_matrix_hinge)
    hinge_axis = eigenvectors_hinge[:, np.argmax(eigenvalues_hinge)]
    hinge_axis = hinge_axis / np.linalg.norm(hinge_axis)
    
    # Calculate the desired rotation (90 degrees in radians)
    angle_radians = np.pi / 2  # 90 degrees
    
    # Using Rodrigues' rotation formula
    K = np.array([[0, -hinge_axis[2], hinge_axis[1]],
                  [hinge_axis[2], 0, -hinge_axis[0]],
                  [-hinge_axis[1], hinge_axis[0], 0]])  # Skew-symmetric matrix
    I = np.eye(3)
    rotation_matrix = I + np.sin(angle_radians) * K + (1 - np.cos(angle_radians)) * np.dot(K, K)
    
    # Rotate the initial point cloud pc2
    rotated_pc2 = np.dot(pc2, rotation_matrix.T)
    pc1 += pc3_mean
    rotated_pc2 += pc3_mean
    
    # Calculate cost based on the alignment of the rotated fridge door with the current position
    distances = np.linalg.norm(pc1 - rotated_pc2, axis=1)
    cost = np.sum(distances)
    
    return cost

### <stage constraints splitter> ###
### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the gripper of the robot at initial frame", "the center of the gripper of the robot", "the axis of the hinge of the fridge", "the distance between the center of the gripper of the robot at initial frame and the axis of the hinge of the fridge equals the distance between the center of the gripper of the robot and the axis of the hinge of the fridge">"""
    mask1 = segment("the center of the gripper of the robot", 0)
    mask2 = segment("the center of the gripper of the robot", -1)
    mask3 = segment("the axis of the hinge of the fridge", -1)
    
    # Ensure point clouds are in the correct shape
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
        pc3 = mask3
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
        pc3 = mask_to_pc(mask3)

    # Compute the mean positions of the gripper and hinge axis
    gripper_initial = np.mean(pc1, axis=0)
    gripper_current = np.mean(pc2, axis=0)
    hinge = np.mean(pc3, axis=0)
    
    # Calculate the distance between the gripper and the hinge at both timestamps
    distance_initial = np.linalg.norm(gripper_initial - hinge)
    distance_current = np.linalg.norm(gripper_current - hinge)
    
    # Calculate the cost based on the difference in distances
    cost = abs(distance_initial - distance_current)
    
    return cost

### <stage constraints splitter> ###
### stage 3 sub-goal constraints (releasing)
def stage_3_subgoal_constraint1():
    """constraints: <"release">"""
    release()
    return

### <geometry tracking list>
object_to_segment = [
    "the area of the handle of the fridge door",
    "the plane of the surface of the fridge door",
    "the axis of the hinge of the fridge",
    "the center of the gripper of the robot"
]
