def stage_2_target_constraint1():
    """constraints: <"targets constraints", "the plane of the surface of the fridge door", "the axis of the hinge of the fridge", "the plane of the surface of the fridge door rotates around the axis of the hinge of the fridge by around 90 degrees">"""
    mask1 = segment("the plane of the surface of the fridge door", -1)
    mask2 = segment("the plane of the surface of the fridge door", 0)
    mask3 = segment("the axis of the hinge of the fridge", 0)
    # Ensure point clouds are in the correct shape
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
        pc3 = mask3
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)
        pc3 = mask_to_pc(mask3)
    
    # Center pc1 and pc2 around the hinge
    pc3_mean = np.mean(pc3, axis=0)
    pc1 = pc1 - pc3_mean
    pc2 = pc2 - pc3_mean
    
    # Find the axis of the hinge using PCA
    covariance_matrix_hinge = np.cov(pc3.T)
    eigenvalues_hinge, eigenvectors_hinge = np.linalg.eig(covariance_matrix_hinge)
    hinge_axis = eigenvectors_hinge[:, np.argmax(eigenvalues_hinge)]
    hinge_axis = hinge_axis / np.linalg.norm(hinge_axis)
    
    # Calculate the desired rotation (90 degrees in radians)
    angle_radians = np.pi / 6  # 90 degrees
    
    # Using Rodrigues' rotation formula
    K = np.array([[0, -hinge_axis[2], hinge_axis[1]],
                  [hinge_axis[2], 0, -hinge_axis[0]],
                  [-hinge_axis[1], hinge_axis[0], 0]])  # Skew-symmetric matrix
    I = np.eye(3)
    rotation_matrix = I + np.sin(angle_radians) * K + (1 - np.cos(angle_radians)) * np.dot(K, K)
    
    # Rotate the initial point cloud pc2
    rotated_pc2 = np.dot(pc2, rotation_matrix.T)
    pc1 = pc1 + pc3_mean
    rotated_pc2 = rotated_pc2 + pc3_mean
    
    # Calculate cost based on the alignment of the rotated fridge door with the current position
    distances = np.linalg.norm(pc1 - rotated_pc2, axis=1)
    cost = np.sum(distances)
    
    print("cost:", cost)
    import open3d as o3d
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(pc1)
    o3d.io.write_point_cloud('debug1.ply', pcd)
    pcd.points = o3d.utility.Vector3dVector(mask2)
    o3d.io.write_point_cloud('debug2.ply', pcd)
    pcd.points = o3d.utility.Vector3dVector(rotated_pc2)
    o3d.io.write_point_cloud("debug3.ply", pcd)
    pcd.points = o3d.utility.Vector3dVector(pc3)
    o3d.io.write_point_cloud("debug4.ply", pcd)
    return cost

