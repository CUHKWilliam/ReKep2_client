```python
import numpy as np

### <stage constraints splitter> ###
### stage 1 sub-goal constraints (if any)
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", ""> (close the gripper)"""
    return grasp("")

### <stage constraints splitter> ###
### stage 2 sub-goal constraints
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the 'H' key of the keyboard", "the center of the gripper of the robot is directly above the center of the 'H' key of the keyboard around 2 centimeters">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the 'H' key of the keyboard", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the 'H' key
    gripper_center = np.mean(pc1, axis=0)
    h_key_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(gripper_center[:2] - h_key_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = abs(gripper_center[2] - h_key_center[2] - 0.02)  # 2 cm above
    
    cost = horizontal_distance + vertical_distance
    return cost

### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the keyboard">"""
    mask1 = segment("the heading direction of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the keyboard", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the normal vector of the plane of the keyboard
    covariance_matrix_keyboard = np.cov(pc2.T)
    eigenvalues_keyboard, eigenvectors_keyboard = np.linalg.eig(covariance_matrix_keyboard)
    keyboard_normal = eigenvectors_keyboard[:, np.argmin(eigenvalues_keyboard)]

    # Calculate the heading direction of the gripper
    covariance_matrix_gripper = np.cov(pc1.T)
    eigenvalues_gripper, eigenvectors_gripper = np.linalg.eig(covariance_matrix_gripper)
    gripper_heading = eigenvectors_gripper[:, np.argmax(eigenvalues_gripper)]

    # Normalize both vectors
    keyboard_normal = keyboard_normal / np.linalg.norm(keyboard_normal)
    gripper_heading = gripper_heading / np.linalg.norm(gripper_heading)
    
    # Compute the dot product between the gripper heading and keyboard normal
    dot_product = np.dot(gripper_heading, keyboard_normal)
    
    # The cost is based on how close the dot product is to 1 (perpendicular)
    cost = (1 - abs(dot_product)) * 5.
    return cost

### <stage constraints splitter> ###
### stage 3 target constraints
def stage_3_target_constraint1():
    """constraints: <"target constraints", "the center of the gripper of the robot", "the center of the 'H' key of the keyboard", "the center of the gripper of the robot reaches the center of the 'H' key of the keyboard">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the 'H' key of the keyboard", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the 'H' key
    gripper_center = np.mean(pc1, axis=0)
    h_key_center = np.mean(pc2, axis=0)
    
    # Calculate the distance between the gripper and the 'H' key
    distance = np.linalg.norm(gripper_center - h_key_center)
    
    return distance

### stage 3 path constraints
def stage_3_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the keyboard">"""
    return stage_2_path_constraint1()  # Same as stage 2 path constraint

### <stage constraints splitter> ###
### stage 4 sub-goal constraints
def stage_4_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the 'I' key of the keyboard", "the center of the gripper of the robot is directly above the center of the 'I' key of the keyboard around 2 centimeters">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the 'I' key of the keyboard", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the 'I' key
    gripper_center = np.mean(pc1, axis=0)
    i_key_center = np.mean(pc2, axis=0)
    
    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(gripper_center[:2] - i_key_center[:2])
    
    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = abs(gripper_center[2] - i_key_center[2] - 0.02)  # 2 cm above
    
    cost = horizontal_distance + vertical_distance
    return cost

### stage 4 path constraints
def stage_4_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the keyboard">"""
    return stage_2_path_constraint1()  # Same as stage 2 path constraint

### <stage constraints splitter> ###
### stage 5 target constraints
def stage_5_target_constraint1():
    """constraints: <"target constraints", "the center of the gripper of the robot", "the center of the 'I' key of the keyboard", "the center of the gripper of the robot reaches the center of the 'I' key of the keyboard">"""
    mask1 = segment("the center of the gripper of the robot", -1)
    mask2 = segment("the center of the 'I' key of the keyboard", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Compute the mean position of the gripper and the 'I' key
    gripper_center = np.mean(pc1, axis=0)
    i_key_center = np.mean(pc2, axis=0)
    
    # Calculate the distance between the gripper and the 'I' key
    distance = np.linalg.norm(gripper_center - i_key_center)
    
    return distance

### stage 5 path constraints
def stage_5_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the keyboard">"""
    return stage_2_path_constraint1()  # Same as stage 2 path constraint

### List of geometries to segment
object_to_segment = [
    "the center of the gripper of the robot",
    "the center of the 'H' key of the keyboard",
    "the center of the 'I' key of the keyboard",
    "the plane of the surface of the keyboard",
    "the heading direction of the gripper of the robot"
]
```