def stage_2_path_constraint1():
    """constraints: <"path constraints", "the heading direction of the gripper of the robot", "the plane of the surface of the keyboard", "the heading direction of the gripper of the robot is perpendicular to the plane of the surface of the keyboard">"""
    mask1 = segment("the heading direction of the gripper of the robot", -1)
    mask2 = segment("the plane of the surface of the keyboard", -1)
    
    if mask1.shape[-1] == 3:
        pc1 = mask1
        pc2 = mask2
    else:
        pc1 = mask_to_pc(mask1)
        pc2 = mask_to_pc(mask2)

    # Calculate the normal vector of the plane of the keyboard
    covariance_matrix_keyboard = np.cov(pc2.T)
    eigenvalues_keyboard, eigenvectors_keyboard = np.linalg.eig(covariance_matrix_keyboard)
    keyboard_normal = eigenvectors_keyboard[:, np.argmin(eigenvalues_keyboard)]

    # Calculate the heading direction of the gripper
    covariance_matrix_gripper = np.cov(pc1.T)
    eigenvalues_gripper, eigenvectors_gripper = np.linalg.eig(covariance_matrix_gripper)
    gripper_heading = eigenvectors_gripper[:, np.argmax(eigenvalues_gripper)]

    # Normalize both vectors
    keyboard_normal = keyboard_normal / np.linalg.norm(keyboard_normal)
    gripper_heading = gripper_heading / np.linalg.norm(gripper_heading)
    
    # Compute the dot product between the gripper heading and keyboard normal
    dot_product = np.dot(gripper_heading, keyboard_normal)
    
    # The cost is based on how close the dot product is to 1 (perpendicular)
    cost = (1 - abs(dot_product)) * 5.
    return cost

